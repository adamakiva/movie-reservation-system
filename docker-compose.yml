# Most environment variables are hard-coded due to it being a local development
# environment. In production the container orchestration will be in charge
# of managing these values

services:
  movie-reservation-system-postgres:
    hostname: movie-reservation-system-postgres
    container_name: movie-reservation-system-postgres
    restart: unless-stopped
    build:
      target: postgres
    user: ${UID}:${GID}
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-admin}
      # Spin-up a an additional replicated database for tests
      - POSTGRES_DATABASES=${POSTGRES_DATABASES:-mrs,mrs_test}
      - PSQL_HISTORY=${PSQL_HISTORY:-/var/lib/postgresql/data/.psql_history}
    volumes:
      - ./dev-data/postgres:/var/lib/postgresql/data:rw
      # See: https://github.com/docker-library/docs/blob/master/postgres/README.md#arbitrary---user-notes
      - /etc/passwd:/etc/passwd:ro
      # See: https://stackoverflow.com/a/44440563
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d mrs && pg_isready -U admin -d mrs_test"]
      interval: 3s
      timeout: 2s
      retries: 5

  movie-reservation-system-rabbitmq:
    hostname: movie-reservation-system-rabbitmq
    container_name: movie-reservation-system-rabbitmq
    restart: unless-stopped
    build:
      target: rabbitmq
    user: ${UID}:${GID}
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-admin}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-admin}
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=${RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS:- -rabbitmq_management load_definitions "/etc/rabbitmq/rabbitmq.definitions.json"}
    volumes:
      - ./dev-data/rabbitmq:/var/lib/rabbitmq:rw
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 15s
      timeout: 5s
      retries: 5

  movie-reservation-system-server:
    hostname: movie-reservation-system-server
    container_name: movie-reservation-system-server
    restart: unless-stopped
    build:
      target: server
    user: ${UID}:${GID}
    # Run node as PID 1
    init: true
    environment:
      # Server options
      - SERVER_PORT=${SERVER_PORT:-4334}
      - SERVER_DEBUG=${SERVER_DEBUG:-0.0.0.0:4335}
      - SERVER_BASE_URL=${SERVER_BASE_URL:-http://localhost}
      - HTTP_ROUTE=${HTTP_ROUTE:-api/v0}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-::,127.0.0.1,localhost}
      # Database options
      - DATABASE_URL=${DATABASE_URL:-postgres://admin:admin@movie-reservation-system-postgres:5432/mrs}
      - DATABASE_TEST_URL=${DATABASE_TEST_URL:-postgres://admin:admin@movie-reservation-system-postgres:5432/mrs_test}
      - DATABASE_MAX_CONNECTIONS=${DATABASE_MAX_CONNECTIONS:-32}
      - DATABASE_STATEMENT_TIMEOUT=${DATABASE_STATEMENT_TIMEOUT:-30000}
      - DATABASE_TRANSACTION_TIMEOUT=${DATABASE_TRANSACTION_TIMEOUT:-60000}
      # Message queue options
      - MESSAGE_QUEUE_URL=${MESSAGE_QUEUE_URL:-amqp://admin:admin@movie-reservation-system-rabbitmq:5672}
      - MESSAGE_QUEUE_CONSUMER_CONCURRENCY=${MESSAGE_QUEUE_CONSUMER_CONCURRENCY:-4}
      - MESSAGE_QUEUE_CONSUMER_PREFETCH_COUNT=${MESSAGE_QUEUE_CONSUMER_PREFETCH_COUNT:-8}
      # Authentication options
      - AUTHENTICATION_ACCESS_TOKEN_EXPIRATION=${AUTHENTICATION_ACCESS_TOKEN_EXPIRATION:-900} # 15 minutes
      - AUTHENTICATION_REFRESH_TOKEN_EXPIRATION=${AUTHENTICATION_REFRESH_TOKEN_EXPIRATION:-2629746} # A month
      - AUTHENTICATION_HASH_SECRET=${AUTHENTICATION_HASH_SECRET:-00c70f6848e9466beec4148b0b3cae89}
      # Websocket options
      - WEBSOCKET_SERVER_BASE_URL=${WEBSOCKET_SERVER_BASE_URL:-ws/v0}
      - WEBSOCKET_SERVER_PING_TIME=${WEBSOCKET_SERVER_PING_TIME:-8000}
      - WEBSOCKET_SERVER_BACKLOG=${WEBSOCKET_SERVER_BACKLOG:-32}
      - WEBSOCKET_SERVER_MAX_PAYLOAD=${WEBSOCKET_SERVER_MAX_PAYLOAD:-262144}  # 256kb
      # Seed admin user data
      - ADMIN_ROLE_ID=${ADMIN_ROLE_ID:-4d9097e1-3821-46f0-b19f-a75c02de9cb6}
      - ADMIN_ROLE_NAME=${ADMIN_ROLE_NAME:-admin}
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@admin.com}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-bla123}
      # Node server options
      - HTTP_SERVER_MAX_HEADERS_COUNT=${HTTP_SERVER_MAX_HEADERS_COUNT:-64}
      - HTTP_SERVER_HEADERS_TIMEOUT=${HTTP_SERVER_HEADERS_TIMEOUT:-8000}
      - HTTP_SERVER_REQUEST_TIMEOUT=${HTTP_SERVER_REQUEST_TIMEOUT:-16000}
      - HTTP_SERVER_TIMEOUT=${HTTP_SERVER_TIMEOUT:-60000}
      - HTTP_SERVER_MAX_REQUESTS_PER_SOCKET=${HTTP_SERVER_MAX_REQUESTS_PER_SOCKET:-64}
      - HTTP_SERVER_KEEP_ALIVE_TIMEOUT=${HTTP_SERVER_KEEP_ALIVE_TIMEOUT:-8000}
      # Node flags and options
      - NODE_ENV=${NODE_ENV:-production}
      - NODE_MAX_SOCKETS=${NODE_MAX_SOCKETS:-512}
      - NODE_MAX_TOTAL_SOCKETS=${NODE_MAX_TOTAL_SOCKETS:-4096}
      - NODE_DEFAULT_HIGH_WATERMARK=${NODE_DEFAULT_HIGH_WATERMARK:-262144}  # 256kb
      - NODE_PIPE_TIMEOUT=${NODE_PIPE_TIMEOUT:-16000}
      - NODE_OPTIONS=${NODE_OPTIONS:- --experimental-transform-types --stack-trace-limit=16 --force-node-api-uncaught-exceptions-policy --enable-source-maps --trace-uncaught --v8-pool-size=0 --max-semi-space-size=32}
      # libuv options
      - UV_THREADPOOL_SIZE=${UV_THREADPOOL_SIZE:-1}
      # Clinic options
      - NO_INSIGHT=true
      - CLINIC_SERVER_PORT=${CLINIC_SERVER_PORT:-4336}
    volumes:
      - ./server:/home/node/mrs:rw
      # See: https://docs.npmjs.com/cli/v6/using-npm/config#cache
      - ./npm-cache/server:/home/node/.npm:rw
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      # The backend is proxied by nginx so it is not directly exposed
      # Only the debugger port is exposed
      - 4335:4335
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -o /dev/null -w '%{http_code}' http://localhost:4334/alive | grep -q '204' &&
          curl -s -o /dev/null -w '%{http_code}' http://localhost:4334/ready | grep -q '204'"
        ]
      interval: 20s
      timeout: 3s
      retries: 5
      start_period: 30s
    depends_on:
      movie-reservation-system-postgres:
        condition: service_healthy
      movie-reservation-system-rabbitmq:
        condition: service_healthy

  worker:
    deploy:
      mode: replicated
      replicas: 1
    restart: unless-stopped
    build:
      target: worker
    user: ${UID}:${GID}
    # Run node as PID 1
    init: true
    environment:
      # Message queue options
      - MESSAGE_QUEUE_URL=${MESSAGE_QUEUE_URL:-amqp://admin:admin@movie-reservation-system-rabbitmq:5672}
      - MESSAGE_QUEUE_CONSUMER_CONCURRENCY=${MESSAGE_QUEUE_CONSUMER_CONCURRENCY:-4}
      - MESSAGE_QUEUE_CONSUMER_PREFETCH_COUNT=${MESSAGE_QUEUE_CONSUMER_PREFETCH_COUNT:-8}
      # Node flags and options
      - NODE_ENV=${NODE_ENV:-production}
      - NODE_DEFAULT_HIGH_WATERMARK=${NODE_DEFAULT_HIGH_WATERMARK:-262144}  # 256kb
      - NODE_OPTIONS=${NODE_OPTIONS:- --no-addons --experimental-transform-types --stack-trace-limit=16 --force-node-api-uncaught-exceptions-policy --enable-source-maps --trace-uncaught --v8-pool-size=0 --max-semi-space-size=32}
      # libuv options
      - UV_THREADPOOL_SIZE=${UV_THREADPOOL_SIZE:-1}
    volumes:
      - ./worker:/home/node/worker:rw
      # See: https://docs.npmjs.com/cli/v6/using-npm/config#cache
      - ./npm-cache/worker:/home/node/.npm:rw
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      movie-reservation-system-rabbitmq:
        condition: service_healthy

  movie-reservation-system-nginx:
    hostname: movie-reservation-system-nginx
    container_name: movie-reservation-system-nginx
    restart: unless-stopped
    build:
      target: nginx
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - 4337:443
    depends_on:
      movie-reservation-system-server:
        condition: service_healthy
